[package]
name = "leptos_macro"
version = { workspace = true }
authors = ["Greg Johnston"]
repository = "https://github.com/leptos-rs/leptos"
description = "view macro for the Leptos web framework."
readme = "../README.md"
rust-version.workspace = true
edition.workspace = true

[lib]
proc-macro = true

[dependencies]
leptos_macro_core.workspace = true
proc-macro-error2 = "2.0.1"
proc-macro2 = "1.0.95"

[features]
csr = ["leptos_macro_core/csr"]
hydrate = ["leptos_macro_core/hydrate"]
ssr = ["leptos_macro_core/ssr"]
nightly = ["leptos_macro_core/nightly"]
tracing = ["leptos_macro_core/tracing"]
islands = ["leptos_macro_core/islands"]
trace-components = ["leptos_macro_core/trace-components"]
trace-component-props = ["leptos_macro_core/trace-component-props"]
actix = ["leptos_macro_core/actix"]
axum = ["leptos_macro_core/axum"]
generic = ["leptos_macro_core/generic"]
# Having an erasure feature rather than normal --cfg erase_components for the proc macro crate is a workaround for this rust issue:
# https://github.com/rust-lang/cargo/issues/4423
# TLDR proc macros will ignore RUSTFLAGS when --target is specified on the cargo command.
# This works around the issue by the non proc-macro crate which does see RUSTFLAGS enabling the replacement feature on the proc-macro crate, which wouldn't.
# This is automatic as long as the leptos crate is depended upon,
# downstream usage should never manually enable this feature.
__internal_erase_components = ["leptos_macro_core/__internal_erase_components"]
