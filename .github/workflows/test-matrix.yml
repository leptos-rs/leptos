name: Test Matrix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Basic compilation and testing
  test-basic:
    name: Basic Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace -- -D warnings
      
      - name: Run tests
        run: cargo test --workspace
      
      - name: Run doctests
        run: cargo test --workspace --doc

  # Feature matrix testing
  test-features:
    name: Feature Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature-set: [csr, ssr, hydrate, all]
        include:
          - feature-set: csr
            features: "csr"
          - feature-set: ssr
            features: "ssr"
          - feature-set: hydrate
            features: "hydrate"
          - feature-set: all
            features: "csr,ssr,hydrate"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Test with features
        run: cargo test --workspace --features "${{ matrix.features }}"

  # Cross-platform testing
  test-cross-platform:
    name: Cross Platform
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: cargo test --workspace

  # WASM testing
  test-wasm:
    name: WASM Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install wasm-pack
        run: cargo install wasm-pack
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Test WASM
        run: cargo test --target wasm32-unknown-unknown

  # Performance testing
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run benchmarks
        run: cargo bench --workspace

  # Coverage testing
  test-coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Generate coverage report
        run: cargo tarpaulin --workspace --out Html --output-dir coverage/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/tarpaulin-report.html
          flags: unittests
          name: codecov-umbrella

  # Example validation
  test-examples:
    name: Example Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Validate examples
        run: |
          for example in examples/*/; do
            if [ -f "$example/Cargo.toml" ]; then
              echo "Checking example: $(basename "$example")"
              cargo check --manifest-path "$example/Cargo.toml"
            fi
          done

  # Documentation testing
  test-docs:
    name: Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build documentation
        run: cargo doc --workspace --no-deps
      
      - name: Test documentation
        run: cargo test --workspace --doc

  # Security testing
  test-security:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit

  # Property-based testing
  test-property:
    name: Property-Based Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run property-based tests
        run: cargo test --test property_based_tests

  # Integration testing
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run integration tests
        run: cargo test --workspace --test "*_integration*"

  # Report generation
  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test-basic, test-features, test-cross-platform, test-wasm, test-performance, test-coverage, test-examples, test-docs, test-security, test-property, test-integration]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Generate test report
        run: |
          echo "# Test Matrix Report" > test_report.md
          echo "Generated on: $(date)" >> test_report.md
          echo "" >> test_report.md
          echo "## Job Status" >> test_report.md
          echo "- Basic Tests: ${{ needs.test-basic.result }}" >> test_report.md
          echo "- Feature Matrix: ${{ needs.test-features.result }}" >> test_report.md
          echo "- Cross Platform: ${{ needs.test-cross-platform.result }}" >> test_report.md
          echo "- WASM Tests: ${{ needs.test-wasm.result }}" >> test_report.md
          echo "- Performance Tests: ${{ needs.test-performance.result }}" >> test_report.md
          echo "- Coverage Report: ${{ needs.test-coverage.result }}" >> test_report.md
          echo "- Example Validation: ${{ needs.test-examples.result }}" >> test_report.md
          echo "- Documentation Tests: ${{ needs.test-docs.result }}" >> test_report.md
          echo "- Security Tests: ${{ needs.test-security.result }}" >> test_report.md
          echo "- Property-Based Tests: ${{ needs.test-property.result }}" >> test_report.md
          echo "- Integration Tests: ${{ needs.test-integration.result }}" >> test_report.md
      
      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test_report.md
